name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:

      name: Hosted Ubuntu 1604
    steps:

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: '$(MYPUBKEY)'
        sshKeySecureFile: 'id_rsa.pub'

    - task: DownloadSecureFile@1
      name: RSApublicKey
      inputs:
        secureFile: 'id_rsa.pub'

   
    - script: |
        cd $(Build.SourcesDirectory)/terraform
        ls -all
        terraform init 
        terraform apply -auto-approve -var 'public_key=$(RSApublicKey.secureFilePath)'   
      displayName: Build terraform infrastructure 
      

    - task: CmdLine@2
      inputs:
        script: |
          sudo npm install -g newman
          sudo npm install -g newman-reporter-junitfull
      displayName: "Install newman"
   
    - task: CmdLine@2
      inputs:
        script: 'newman run $(Build.SourcesDirectory)/automatedtesting/postman/data_validation_test.postman_collection.json -e "$(Build.SourcesDirectory)/automatedtesting/postman/userva.postman_environment.json" -r cli,junitfull --reporter-junitfull-export JUnitReportDataVal.xml'
      displayName: "Run Postman validation test"
      continueOnError: True
    - task: CmdLine@2
      inputs:
        script: 'newman run $(Build.SourcesDirectory)/automatedtesting/postman/regression_test.postman_collection.json -e "$(Build.SourcesDirectory)/automatedtesting/postman/userva.postman_environment.json" -r cli,junitfull --reporter-junitfull-export JUnitReportRegr.xml'   
      displayName: "Run Postman regression test"
      continueOnError: True    

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'JUnitReport*.xml'
      continueOnError: True
      
    #- task: ArchiveFiles@2
    # displayName: 'Archive FakeRestAPI'
    #  inputs:
    #    rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/jmeter/fakerestapi'
    #    includeRootFolder: false
    #    archiveType: 'zip'
    #    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #  displayName: 'Upload Package'
    #  artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
           - checkout: self
           - task: AzureWebApp@1
             displayName: 'Deploy Azure Web App'
             inputs:
               azureSubscription: 'BohdanSubscriptions(5717f5b8-d0ac-41b0-a6b7-6c3a51c25847)'
               appType: 'webApp'
               appName: 'udacity-app-AppService'
               package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
               deploymentMethod: 'auto'

          

           - task: CmdLine@2
             inputs:
              script: |
                cd $(Build.SourcesDirectory)/automatedtesting/jmeter/
                VERSION='5.3'
                URL=https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${VERSION}.tgz
                # Download Jmeter.
                curl $URL > apache-jmeter-${VERSION}.tgz
                gunzip apache-jmeter-${VERSION}.tgz
                tar -xvf apache-jmeter-${VERSION}.tar
                mkdir -p $(Build.SourcesDirectory)/automatedtesting/jmeter/report
                ./apache-jmeter-${VERSION}/bin/jmeter -n -t Starter.jmx -l report/results-starter.jtl -e -o $(Build.SourcesDirectory)/automatedtesting/jmeter/report/starter
                echo endurance test
                ./apache-jmeter-${VERSION}/bin/jmeter -n -t EnduranceTest.jmx -l report/endurance-test-result.jtl -e -o $(Build.SourcesDirectory)/automatedtesting/jmeter/report/endurance
                echo stress test
                ./apache-jmeter-${VERSION}/bin/jmeter -n -t StressTest.jmx -l report/stress-test-result.jtl -e -o $(Build.SourcesDirectory)/automatedtesting/jmeter/report/stress

           - task: PublishPipelineArtifact@1
             displayName: Publish JMeter Report
             inputs:
              targetPath:  $(Build.SourcesDirectory)/automatedtesting/jmeter/report
              artifact: jmeter
          
         
          

- stage:
  jobs:
  - deployment: VMDeploy
    displayName: Deployment VM
    environment:
      name:  Test
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                ls -a 
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo pip3 install --upgrade pip
                sudo apt-get install -y chromium-browser
                sudo apt-get install chromium-chromedriver
                sudo pip3 install selenium
                export PATH=$PATH:/usr/bin/chromedriver
                python3 $(Build.SourcesDirectory)/automatedtesting/selenium/login.py


